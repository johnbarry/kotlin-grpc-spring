// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";

package helloworld;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc sayHello (HelloRequest) returns (HelloReply) {}
  rpc backPressureDemo(BackPressureDemoRequest) returns (stream ANumber) {}
}

service FriendService {
  rpc generateTestData (Empty) returns (Empty) {}
  rpc listPeopleChanges (Empty) returns (stream PersonChange) {}
  rpc peopleChangeEvents (Empty) returns (stream PersonChangeEvent) {}
  rpc changeCallback(PersonChangeEvent) returns (PersonChange) {}

  rpc listPeople (Empty) returns (stream Person) {}
  rpc getPerson(PersonId) returns (Person) {}

  rpc requestFriend(FriendRequest) returns (NewFriendCommand) {}
  rpc makeFriend(NewFriendCommand) returns (NewFriendshipEvent) {}
  rpc friendCommands(EventStreamRequest) returns (stream NewFriendCommand) {}
  rpc makeOutstandingFriends(EventStreamRequest) returns (stream NewFriendshipEvent) {}

}

service TestDataService {
  rpc generateTestData(TestDataRequest) returns (TestDataResponse) {}
}

service PersonComparisonService {
  rpc comparePerson(PersonComparison) returns (ComparisonResult) {}
  rpc kafkaComparison (PersonTopicComparison) returns (PersonTopicComparisonResult) {}
  rpc personRecords(PersonRecordRequest) returns (stream PersonRecordLookup) {}
}

service ComparisonResultService {
  rpc kafkaComparisonReport(ComparisonReportTopic) returns (ComparisonSummary) {}
  rpc comparisonResult(ComparisonReportTopic) returns (stream ComparisonResult) {}
}

service KafkaService {
  rpc kafkaRecordCount(KafkaCountRequest) returns (KafkaCountResponse) {}
  rpc createTopic(TopicCreationRequest) returns (Empty) {}
  rpc deleteTopic(TopicDeletionRequest) returns (Empty) {}
}

message PersonRecordRequest {
  PersonTopicComparison topicInfo = 1;
  repeated string identifier = 2;
}

message PersonRecordLookup {
  string identifier = 1;
  Person expected = 2;
  Person2 actual = 3;
}

message ComparisonReportTopic {
  string topicName = 1;
}

message ComparisonSummary {
  string topicName = 1;
  uint32 matches = 2;
  uint32 breaks = 3;
  uint32 onlyExpected = 4;
  uint32 onlyActual = 5;
  uint32 totalRecords = 6;
}


message TopicCreationRequest {
  string topic = 1;
  uint32 partitions = 2;
  uint32 replicaCount = 3;;
}

message TopicDeletionRequest {
  string topic = 1;
}

message KafkaCountRequest {
  string topic = 1;
  oneof partitions {
    uint32 partition = 2;
    bool allPartitions = 3;
  }
}

message KafkaTopicInfo {
  enum Format {
    UNKNOWN = 0;
    XML = 1;
    JSON = 2;
    PROTO = 3;
  }

  string topicName = 1;
  Format format = 2;
}

message PersonTopicComparison {
  KafkaTopicInfo actualDataTopic = 1;
  KafkaTopicInfo expectedDataTopic = 2;
  string resultTopicName = 3;
  repeated uint32 partitionsToCompare = 4;
}

message PersonTopicComparisonResult {
  uint32 matchedRecords = 1;
  uint32 unmatchedRecords = 2;
  uint32 missingActual = 3;
  uint32 missingExpected = 4;
  uint32 totalRecords = 5;
}

message PersonComparisonResponse {
  uint64 recordCount = 1;
  uint64 breakCount = 2;
}


message KafkaCountResponse {
  uint64 records = 1;
}

message TestDataRequest {
  uint64 records = 1;
  string expectedDataTopic = 2;
  string actualDataTopic = 3;
  uint32 percentBreaks = 4;
  uint32 missingExpectedPercent = 5;
  uint32 missingActualPercent = 6;
}

message TestDataResponse {
  uint64 actualCount = 1;
  uint64 expectedCount = 2;
  uint64 totalCount = 3;
  uint64 breakCount = 4;
  uint32 missingExpectedCount = 5;
  uint32 missingActualCount = 6;
  uint32 matchCount = 7;
}

message PersonComparison {
  string identifier = 1;
  Person expected = 2;
  Person2 actual  = 3;
}

message ComparisonBreak {
  string fieldName = 1;
  string expectedValue = 2;
  string actualValue = 3;
  string explain = 4;
}

message RecordComparison {
  repeated ComparisonBreak unexpectedBreaks = 2;
  repeated ComparisonBreak expectedBreaks = 3;
}

enum ComparisonResultType {
  UNKNOWN = 0;
  MATCHED = 1;
  BREAKS = 2;
  ONLY_EXPECTED = 3;
  ONLY_ACTUAL = 4;
}


message ComparisonResult {
  string identifier = 1;
  ComparisonResultType result = 2;
  repeated ComparisonBreak unexpectedBreaks = 3;
  repeated ComparisonBreak expectedBreaks = 4;
}

message ANumber {
  uint32 number = 1;
  repeated string filler = 2;
}

message BackPressureDemoRequest {
  uint32 number = 1;
  bool addFiller = 2;
}

message PersonId {
  uint64 id = 1;
}

message Person {
  uint64 id = 6;
  string forename = 1;
  string surname = 2;
  string addressLine1 = 3;
  string addressLine2 = 4;
  string city = 5;
}

message PersonChange {
  string changeId = 1;
  uint64 version = 2;
  Person person = 3;
  enum Operation {
    UNKNOWN = 0;
    CREATE = 1;
    UPDATE = 2;
    DELETE = 3;
  }
  Operation operation = 4;
}

message PersonChangeEvent {
  string changeId = 1;
  uint64 id = 2;
  PersonChange.Operation operation = 3;
}

message FriendListRequest {

}

message Empty {}

message EventStreamRequest {}

message FriendRequest {
  Person firstPerson = 1;
  Person secondPerson = 2;
  int64 kafkaOffset = 3;
}

message NewFriendCommand {
  string key = 1;
  Person firstPerson = 2;
  Person secondPerson = 3;
  int64 kafkaOffset = 4;
}

message NewFriendshipEvent {
  Person firstPerson = 1;
  Person secondPerson = 2;
  google.protobuf.Timestamp dated = 3;
  int64 kafkaOffset = 4;
}

message  FriendReply {
  Person person = 1;
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

message Person2 {
  uint64 id = 6;
  string name = 1;
  repeated string address = 2;
}
